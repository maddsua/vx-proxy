name: Release

on:
  release:
    types: [published]

jobs:
  extract-tag:
    name: Extract release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ env.RELEASE_TAG }}
      version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Parse refs
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/*/}
          test -z $RELEASE_TAG && exit 1
          RELEASE_VERSION=$(echo "$RELEASE_TAG" | sed 's/^[^0-9]*//')
          test -z $RELEASE_VERSION && exit 1
          echo "Releasing version: $RELEASE_VERSION; Tag: $RELEASE_TAG"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

  build-debian:
    name: Build
    runs-on: ubuntu-latest
    container: golang:1.24.3-bookworm
    needs: ["extract-tag"]
    steps:
      - name: git checkout
        uses: actions/checkout@v4

      - name: Build
        run: |
          mkdir -p build/usr/bin
          go build -v -o build/usr/bin/vx-proxy -ldflags "-s -w" cmd/vx-proxy/main.go

      - name: Create control file
        run: |
          mkdir -p build/DEBIAN
          cat << EOF > build/DEBIAN/control
          Package: vx-proxy
          Version: ${{ needs.extract-tag.outputs.version }}
          Architecture: amd64
          Maintainer: maddsua
          Section: net
          Priority: optional
          Description: A scalable RADIUS-controlled proxy service
          EOF

      - name: Create service file
        run: |
          mkdir -p build/etc/systemd/system
          cat << EOF > build/etc/systemd/system/vx-proxy.service
          [Unit]
          Description=vx-proxy service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/bin/vx-proxy
          Restart=on-failure
          RestartSec=1
          StartLimitBurst=5
          StartLimitIntervalSec=10
          User=nobody

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Create postinstall file
        run: |
          cat << EOF > build/DEBIAN/postinst
          #!/bin/sh
          set -e
          mkdir -p /etc/vx-proxy
          systemctl daemon-reload
          systemctl enable vx-proxy.service
          systemctl start vx-proxy.service
          echo "vx-proxy service installed and started."
          EOF

          chmod +x build/DEBIAN/postinst

      - name: Create package file
        run: |
          dpkg-deb -v --build ./build
          mv build.deb vx-proxy-${{ needs.extract-tag.outputs.version }}-amd64.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-pkg
          path: vx-proxy-${{ needs.extract-tag.outputs.version }}-amd64.deb

  upload-assets:
    name: Upload release assets
    needs: ["extract-tag", "build-debian"]
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: .

      - name: Upload .deb package file
        run: |
          gh release upload ${{ needs.extract-tag.outputs.tag }} vx-proxy-${{ needs.extract-tag.outputs.version }}-amd64.deb
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
